{"version":3,"sources":["Recipe.jsx","App.jsx","reportWebVitals.js","index.jsx"],"names":["Recipe","title","calories","image","ingredients","className","src","alt","map","ingredient","text","App","useState","recipies","setRecipies","search","setSearch","query","setQuery","useEffect","getRecipes","a","fetch","response","json","data","hits","onSubmit","e","preventDefault","type","value","onChange","target","recipe","label","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sSAqBeA,EAnBA,SAAC,GAA6C,IAA3CC,EAA0C,EAA1CA,MAAOC,EAAmC,EAAnCA,SAAUC,EAAyB,EAAzBA,MAAOC,EAAkB,EAAlBA,YACxC,OACE,qBAAKC,UAAU,SAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,6BAAKJ,IACL,sBAAKI,UAAU,WAAf,UACE,qBAAKC,IAAKH,EAAOI,IAAI,KACrB,2CAAcL,QAEhB,6BACGE,EAAYI,KAAI,SAACC,GAAD,OACf,6BAAI,4BAAIA,EAAWC,oBCqDhBC,MA9Df,WACE,IAGA,EAAgCC,mBAAS,IAAzC,mBAAOC,EAAP,KAAiBC,EAAjB,KACA,EAA4BF,mBAAS,IAArC,mBAAOG,EAAP,KAAeC,EAAf,KACA,EAA0BJ,mBAAS,WAAnC,mBAAOK,EAAP,KAAcC,EAAd,KAEAC,qBAAU,WACRC,MACC,CAACH,IAEJ,IAAMG,EAAU,uCAAG,8BAAAC,EAAA,sEACMC,MAAM,mCAAD,OACSL,EADT,mBAZf,WAYe,oBAXd,qCAUG,cACXM,EADW,gBAIEA,EAASC,OAJX,OAIXC,EAJW,OAKjBX,EAAYW,EAAKC,MALA,2CAAH,qDAmBhB,OACE,sBAAKrB,UAAU,MAAf,UACE,sBAAKA,UAAU,SAAf,UACE,4DACA,uBAAMsB,SAVM,SAAAC,GAChBA,EAAEC,iBACFX,EAASH,GACTC,EAAU,KAOqBX,UAAU,cAArC,UACE,uBACEA,UAAU,aACVyB,KAAK,OACLC,MAAOhB,EACPiB,SAnBW,SAAAJ,GACnBZ,EAAUY,EAAEK,OAAOF,UAoBb,wBAAQ1B,UAAU,aAAayB,KAAK,SAApC,0BAKJ,qBAAKzB,UAAU,iBAAf,SACGQ,EAASL,KAAI,SAAC0B,GAAD,OACZ,cAAC,EAAD,CAEEjC,MAAOiC,EAAOA,OAAOC,MACrBjC,SAAUgC,EAAOA,OAAOhC,SACxBC,MAAO+B,EAAOA,OAAO/B,MACrBC,YAAa8B,EAAOA,OAAO9B,aAJtB8B,EAAOA,OAAOC,gBC1ChBC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.c7159281.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Recipe.css';\r\nconst Recipe = ({ title, calories, image, ingredients }) => {\r\n  return (\r\n    <div className=\"Recipe\">\r\n      <div className=\"recipe-content\">\r\n        <h1>{title}</h1>\r\n        <div className=\"food-img\">\r\n          <img src={image} alt=\"\"></img>\r\n          <p>Calories: {calories}</p>\r\n        </div>\r\n        <ul>\r\n          {ingredients.map((ingredient) => (\r\n            <li><p>{ingredient.text}</p></li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Recipe;","import React, { useEffect, useState } from \"react\";\nimport \"./App.css\";\nimport Recipe from \"./Recipe\";\n\nfunction App() {\n  const APP_ID = \"df8d865e\";\n  const APP_KEY = \"0108dde7dfc2a7949687aa2bd86383da\";\n  // const exampleReq = `https://api.edamam.com/search?q=chicken&app_id=${APP_ID}&app_key=${APP_KEY}`;\n  const [recipies, setRecipies] = useState([]);\n  const [search, setSearch] = useState('')\n  const [query, setQuery] = useState('chicken')\n\n  useEffect(() => {\n    getRecipes();\n  }, [query]);\n\n  const getRecipes = async () => {\n    const response = await fetch(\n      `https://api.edamam.com/search?q=${query}&app_id=${APP_ID}&app_key=${APP_KEY}`\n    );\n    const data = await response.json();\n    setRecipies(data.hits);\n    // console.log(data.hits);\n  };\n\n  const updateSearch = e =>{\n    setSearch(e.target.value);\n  }\n\n  const getSearch = e => {\n    e.preventDefault();\n    setQuery(search)\n    setSearch('')\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"header\">\n        <h1>Search Your Favourite Food</h1>\n        <form onSubmit={getSearch} className=\"search-form\">\n          <input\n            className=\"search-bar\"\n            type=\"text\"\n            value={search}\n            onChange={updateSearch}\n          ></input>\n          <button className=\"search-btn\" type=\"submit\">\n            Search\n          </button>\n        </form>\n      </div>\n      <div className=\"recepi_section\">\n        {recipies.map((recipe) => (\n          <Recipe\n            key={recipe.recipe.label}\n            title={recipe.recipe.label}\n            calories={recipe.recipe.calories}\n            image={recipe.recipe.image}\n            ingredients={recipe.recipe.ingredients}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}